
1) Construir el modelo ejecutando el script <construir-RNA-MLP-IRIS.ipynb> completo y guardarlo en el drive.

-Opción A) Acceder con TensorFlow.js:
A.1) Convertir el modelo guardado en el paso (1) para poder ser usado con TensorFlow.js usando el script <A1-Exportar-Modelo-a-TFjs.ipynb> 
Luego hay dos posibilidades para publicar la página:

--SubOpción Aa) utilizar AppsScripts para publicar la página:
Aa.1) Acceder a AppsScripts accediendo a https://script.google.com/home/my
Aa.2) Crear nuevo proyecto e indicar el nombre que se desee.
Aa.3) Copiar en <Code.gs> todo el contenido del archivo del mismo nombre disponible en subdirectorio <Aa-AppScript-files>
Aa.4) Copiar File Ids de la ejecución (A.1) en las constantes del <Code.gs> copiado.
Aa.5) Agregar archivo HTML y renombrarlo a "index.html".
Aa.6) Copiar en <index.html> todo el contenido del archivo del mismo nombre disponible en subdirectorio <Aa-AppScript-files>
Aa.7) Realizar la publicación del proyecto usando Deploy/Implementación > New Deployment/Nueva implementación y eligiendo tipo "Web App" (elegir nombre y permisos según su preferencia). Luego, se debe autorizar el acceso para que pueda acceder al drive.
Aa.9) Abrir la URL que se asigna para el proyecto y probar las opciones de la página.

--SubOpción Ab) utilizar directamente GitHub para publicar la página:
Ab.1) Crear un repositorio en https://github.com/ con el nombre que se desee.
Ab.2) Subir carpeta de exportado como TensorFlow.js al repositorio creado.
Ab.3) Editar archivo "index.html" disponible en subdirectorio <Ab-GitHub> indicando:
---- const Model_URL = URL "raw" obtenida del archivo <model.js> subido al respositorio creado.
---- const Model_CLASES = definición de clases obenida de la ejecución de (A.1) para exportar a TF.js.
Ab.4) Subir archivo "index.html" editado al repositorio creado.
Ab.5) Publicar página "index.html" subida en forma pública usando https://raw.githack.com/ o un sitio similar.
Ab.6) Abrir URL asignada y probar las opciones de la página

-Opción B) Crear Web API con TF.Keras con Flask:
B.1) Crear cuenta en https://dashboard.ngrok.com/signup para crear Web API pública
B.2) Ejecutar script <B1-Crear-Model-Web-API.ipynb> ingresando los datos solicitados.
B.3) Probar Web API pública ejecutando <B2-Probar-Model-Web-API-publica.ipynb> con la URL pública obtenida de (B.2).
B.4) Probar Web Page pública ejecutando URL indicada al ejecutar (B.2).

-Opción C) Crear GoogleSheet:
C.1) Ejecutar script <C1-Exportar-Modelo-a-GoogleSheet.ipynb> dando los permisos correspondientes.
C.2) Abrir la planilla creada.
Nota: funciona para redes sencillas solamente.

